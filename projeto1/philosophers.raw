  0:	proc  - (:root:) creates proc  0 (:init:)
  1:	proc  0 (:init::1) philosophers.pml:42 (state 1)	[i = 0]
		:init:(0):i = 0

  2:	proc  0 (:init::1) philosophers.pml:45 (state 8)	[.(goto)]

  3:	proc  0 (:init::1) philosophers.pml:42 (state 2)	[((i<=(5-1)))]

Starting Phil with pid 1
  4:	proc  0 (:init::1) creates proc  1 (Phil)
  4:	proc  0 (:init::1) philosophers.pml:43 (state 3)	[(run Phil())]

  5:	proc  0 (:init::1) philosophers.pml:42 (state 4)	[i = (i+1)]
		:init:(0):i = 1

  6:	proc  0 (:init::1) philosophers.pml:45 (state 8)	[.(goto)]

philosopher 1 thinks ...
  7:	proc  1 (Phil:1) philosophers.pml:13 (state 1)	[printf('philosopher %d thinks ...\\n',_pid)]

  8:	proc  0 (:init::1) philosophers.pml:42 (state 2)	[((i<=(5-1)))]

Starting Phil with pid 2
  9:	proc  0 (:init::1) creates proc  2 (Phil)
  9:	proc  0 (:init::1) philosophers.pml:43 (state 3)	[(run Phil())]

 10:	proc  0 (:init::1) philosophers.pml:42 (state 4)	[i = (i+1)]
		:init:(0):i = 2

 11:	proc  0 (:init::1) philosophers.pml:45 (state 8)	[.(goto)]

philosopher 2 thinks ...
 12:	proc  2 (Phil:1) philosophers.pml:13 (state 1)	[printf('philosopher %d thinks ...\\n',_pid)]

 13:	proc  2 (Phil:1) philosophers.pml:18 (state 2)	[nforks = 0]
		Phil(2):nforks = 0

 14:	proc  0 (:init::1) philosophers.pml:42 (state 2)	[((i<=(5-1)))]

 15:	proc  2 (Phil:1) philosophers.pml:29 (state 12)	[.(goto)]

 16:	proc  1 (Phil:1) philosophers.pml:18 (state 2)	[nforks = 0]
		Phil(1):nforks = 0

Starting Phil with pid 3
 17:	proc  0 (:init::1) creates proc  3 (Phil)
 17:	proc  0 (:init::1) philosophers.pml:43 (state 3)	[(run Phil())]

 18:	proc  1 (Phil:1) philosophers.pml:29 (state 12)	[.(goto)]

philosopher 3 thinks ...
 19:	proc  3 (Phil:1) philosophers.pml:13 (state 1)	[printf('philosopher %d thinks ...\\n',_pid)]

 20:	proc  0 (:init::1) philosophers.pml:42 (state 4)	[i = (i+1)]
		:init:(0):i = 3

 21:	proc  3 (Phil:1) philosophers.pml:18 (state 2)	[nforks = 0]
		Phil(3):nforks = 0

 22:	proc  0 (:init::1) philosophers.pml:45 (state 8)	[.(goto)]

 23:	proc  0 (:init::1) philosophers.pml:42 (state 2)	[((i<=(5-1)))]

 24:	proc  1 (Phil:1) philosophers.pml:19 (state 3)	[((forks[(_pid-1)]==0))]

Starting Phil with pid 4
 25:	proc  0 (:init::1) creates proc  4 (Phil)
 25:	proc  0 (:init::1) philosophers.pml:43 (state 3)	[(run Phil())]

philosopher 4 thinks ...
 26:	proc  4 (Phil:1) philosophers.pml:13 (state 1)	[printf('philosopher %d thinks ...\\n',_pid)]

 27:	proc  0 (:init::1) philosophers.pml:42 (state 4)	[i = (i+1)]
		:init:(0):i = 4

 28:	proc  3 (Phil:1) philosophers.pml:29 (state 12)	[.(goto)]

 29:	proc  0 (:init::1) philosophers.pml:45 (state 8)	[.(goto)]

 30:	proc  4 (Phil:1) philosophers.pml:18 (state 2)	[nforks = 0]
		Phil(4):nforks = 0

 31:	proc  0 (:init::1) philosophers.pml:42 (state 2)	[((i<=(5-1)))]

 32:	proc  1 (Phil:1) philosophers.pml:20 (state 4)	[forks[(_pid-1)] = _pid]
		forks[0] = 1
		forks[1] = 0
		forks[2] = 0
		forks[3] = 0
		forks[4] = 0

 33:	proc  3 (Phil:1) philosophers.pml:19 (state 3)	[((forks[(_pid-1)]==0))]

 34:	proc  1 (Phil:1) philosophers.pml:21 (state 5)	[nforks = (nforks+1)]
		Phil(1):nforks = 1

 35:	proc  1 (Phil:1) philosophers.pml:29 (state 12)	[.(goto)]

Starting Phil with pid 5
 36:	proc  0 (:init::1) creates proc  5 (Phil)
 36:	proc  0 (:init::1) philosophers.pml:43 (state 3)	[(run Phil())]

 37:	proc  2 (Phil:1) philosophers.pml:19 (state 3)	[((forks[(_pid-1)]==0))]

 38:	proc  3 (Phil:1) philosophers.pml:20 (state 4)	[forks[(_pid-1)] = _pid]
		forks[0] = 1
		forks[1] = 0
		forks[2] = 3
		forks[3] = 0
		forks[4] = 0

 39:	proc  0 (:init::1) philosophers.pml:42 (state 4)	[i = (i+1)]
		:init:(0):i = 5

 40:	proc  0 (:init::1) philosophers.pml:45 (state 8)	[.(goto)]

philosopher 5 thinks ...
 41:	proc  5 (Phil:1) philosophers.pml:13 (state 1)	[printf('philosopher %d thinks ...\\n',_pid)]

 42:	proc  3 (Phil:1) philosophers.pml:21 (state 5)	[nforks = (nforks+1)]
		Phil(3):nforks = 1

 43:	proc  0 (:init::1) philosophers.pml:44 (state 5)	[else]

 44:	proc  0 (:init::1) philosophers.pml:44 (state 6)	[goto :b2]

 45:	proc  2 (Phil:1) philosophers.pml:20 (state 4)	[forks[(_pid-1)] = _pid]
		forks[0] = 1
		forks[1] = 2
		forks[2] = 3
		forks[3] = 0
		forks[4] = 0

 46:	proc  3 (Phil:1) philosophers.pml:29 (state 12)	[.(goto)]

 47:	proc  5 (Phil:1) philosophers.pml:18 (state 2)	[nforks = 0]
		Phil(5):nforks = 0

 48:	proc  3 (Phil:1) philosophers.pml:22 (state 6)	[((forks[(_pid%5)]==0))]

 49:	proc  2 (Phil:1) philosophers.pml:21 (state 5)	[nforks = (nforks+1)]
		Phil(2):nforks = 1

 50:	proc  3 (Phil:1) philosophers.pml:23 (state 7)	[forks[(_pid%5)] = _pid]
		forks[0] = 1
		forks[1] = 2
		forks[2] = 3
		forks[3] = 3
		forks[4] = 0

 51:	proc  3 (Phil:1) philosophers.pml:24 (state 8)	[nforks = (nforks+1)]
		Phil(3):nforks = 2

 52:	proc  2 (Phil:1) philosophers.pml:29 (state 12)	[.(goto)]

 53:	proc  5 (Phil:1) philosophers.pml:29 (state 12)	[.(goto)]

 54:	proc  4 (Phil:1) philosophers.pml:29 (state 12)	[.(goto)]

 55:	proc  4 (Phil:1) philosophers.pml:22 (state 6)	[((forks[(_pid%5)]==0))]

 56:	proc  3 (Phil:1) philosophers.pml:29 (state 12)	[.(goto)]

 57:	proc  4 (Phil:1) philosophers.pml:23 (state 7)	[forks[(_pid%5)] = _pid]
		forks[0] = 1
		forks[1] = 2
		forks[2] = 3
		forks[3] = 3
		forks[4] = 4

 58:	proc  4 (Phil:1) philosophers.pml:24 (state 8)	[nforks = (nforks+1)]
		Phil(4):nforks = 1

 59:	proc  4 (Phil:1) philosophers.pml:29 (state 12)	[.(goto)]

 60:	proc  3 (Phil:1) philosophers.pml:25 (state 9)	[((nforks==2))]

 61:	proc  3 (Phil:1) philosophers.pml:25 (state 10)	[goto :b1]

 62:	proc  3 (Phil:1) philosophers.pml:29 (state 14)	[assert(((forks[(_pid-1)]==_pid)&&(forks[(_pid%5)]==_pid)))]

philosopher 3 eats ...
 63:	proc  3 (Phil:1) philosophers.pml:30 (state 15)	[printf('philosopher %d eats ...\\n',_pid)]

 64:	proc  3 (Phil:1) philosophers.pml:34 (state 16)	[forks[(_pid-1)] = 0]
		forks[0] = 1
		forks[1] = 2
		forks[2] = 0
		forks[3] = 3
		forks[4] = 4

 65:	proc  3 (Phil:1) philosophers.pml:35 (state 17)	[forks[(_pid%5)] = 0]
		forks[0] = 1
		forks[1] = 2
		forks[2] = 0
		forks[3] = 0
		forks[4] = 4

 66:	proc  4 (Phil:1) philosophers.pml:19 (state 3)	[((forks[(_pid-1)]==0))]

 67:	proc  2 (Phil:1) philosophers.pml:22 (state 6)	[((forks[(_pid%5)]==0))]

 68:	proc  4 (Phil:1) philosophers.pml:20 (state 4)	[forks[(_pid-1)] = _pid]
		forks[0] = 1
		forks[1] = 2
		forks[2] = 0
		forks[3] = 4
		forks[4] = 4

 69:	proc  3 (Phil:1) philosophers.pml:38 (state 19)	[.(goto)]

philosopher 3 thinks ...
 70:	proc  3 (Phil:1) philosophers.pml:13 (state 1)	[printf('philosopher %d thinks ...\\n',_pid)]

 71:	proc  4 (Phil:1) philosophers.pml:21 (state 5)	[nforks = (nforks+1)]
		Phil(4):nforks = 2

 72:	proc  2 (Phil:1) philosophers.pml:23 (state 7)	[forks[(_pid%5)] = _pid]
		forks[0] = 1
		forks[1] = 2
		forks[2] = 2
		forks[3] = 4
		forks[4] = 4

 73:	proc  3 (Phil:1) philosophers.pml:18 (state 2)	[nforks = 0]
		Phil(3):nforks = 0

 74:	proc  2 (Phil:1) philosophers.pml:24 (state 8)	[nforks = (nforks+1)]
		Phil(2):nforks = 2

 75:	proc  3 (Phil:1) philosophers.pml:29 (state 12)	[.(goto)]

 76:	proc  4 (Phil:1) philosophers.pml:29 (state 12)	[.(goto)]

 77:	proc  2 (Phil:1) philosophers.pml:29 (state 12)	[.(goto)]

 78:	proc  4 (Phil:1) philosophers.pml:25 (state 9)	[((nforks==2))]

 79:	proc  2 (Phil:1) philosophers.pml:25 (state 9)	[((nforks==2))]

 80:	proc  2 (Phil:1) philosophers.pml:25 (state 10)	[goto :b1]

 81:	proc  4 (Phil:1) philosophers.pml:25 (state 10)	[goto :b1]

 82:	proc  2 (Phil:1) philosophers.pml:29 (state 14)	[assert(((forks[(_pid-1)]==_pid)&&(forks[(_pid%5)]==_pid)))]

 83:	proc  4 (Phil:1) philosophers.pml:29 (state 14)	[assert(((forks[(_pid-1)]==_pid)&&(forks[(_pid%5)]==_pid)))]

philosopher 4 eats ...
 84:	proc  4 (Phil:1) philosophers.pml:30 (state 15)	[printf('philosopher %d eats ...\\n',_pid)]

philosopher 2 eats ...
 85:	proc  2 (Phil:1) philosophers.pml:30 (state 15)	[printf('philosopher %d eats ...\\n',_pid)]

 86:	proc  4 (Phil:1) philosophers.pml:34 (state 16)	[forks[(_pid-1)] = 0]
		forks[0] = 1
		forks[1] = 2
		forks[2] = 2
		forks[3] = 0
		forks[4] = 4

 87:	proc  3 (Phil:1) philosophers.pml:22 (state 6)	[((forks[(_pid%5)]==0))]

 88:	proc  2 (Phil:1) philosophers.pml:34 (state 16)	[forks[(_pid-1)] = 0]
		forks[0] = 1
		forks[1] = 0
		forks[2] = 2
		forks[3] = 0
		forks[4] = 4

 89:	proc  3 (Phil:1) philosophers.pml:23 (state 7)	[forks[(_pid%5)] = _pid]
		forks[0] = 1
		forks[1] = 0
		forks[2] = 2
		forks[3] = 3
		forks[4] = 4

 90:	proc  1 (Phil:1) philosophers.pml:22 (state 6)	[((forks[(_pid%5)]==0))]

 91:	proc  1 (Phil:1) philosophers.pml:23 (state 7)	[forks[(_pid%5)] = _pid]
		forks[0] = 1
		forks[1] = 1
		forks[2] = 2
		forks[3] = 3
		forks[4] = 4

 92:	proc  3 (Phil:1) philosophers.pml:24 (state 8)	[nforks = (nforks+1)]
		Phil(3):nforks = 1

 93:	proc  3 (Phil:1) philosophers.pml:29 (state 12)	[.(goto)]

 94:	proc  4 (Phil:1) philosophers.pml:35 (state 17)	[forks[(_pid%5)] = 0]
		forks[0] = 1
		forks[1] = 1
		forks[2] = 2
		forks[3] = 3
		forks[4] = 0

 95:	proc  5 (Phil:1) philosophers.pml:19 (state 3)	[((forks[(_pid-1)]==0))]

 96:	proc  4 (Phil:1) philosophers.pml:38 (state 19)	[.(goto)]

 97:	proc  5 (Phil:1) philosophers.pml:20 (state 4)	[forks[(_pid-1)] = _pid]
		forks[0] = 1
		forks[1] = 1
		forks[2] = 2
		forks[3] = 3
		forks[4] = 5

 98:	proc  5 (Phil:1) philosophers.pml:21 (state 5)	[nforks = (nforks+1)]
		Phil(5):nforks = 1

philosopher 4 thinks ...
 99:	proc  4 (Phil:1) philosophers.pml:13 (state 1)	[printf('philosopher %d thinks ...\\n',_pid)]

100:	proc  5 (Phil:1) philosophers.pml:29 (state 12)	[.(goto)]

101:	proc  2 (Phil:1) philosophers.pml:35 (state 17)	[forks[(_pid%5)] = 0]
		forks[0] = 1
		forks[1] = 1
		forks[2] = 0
		forks[3] = 3
		forks[4] = 5

102:	proc  3 (Phil:1) philosophers.pml:19 (state 3)	[((forks[(_pid-1)]==0))]

103:	proc  2 (Phil:1) philosophers.pml:38 (state 19)	[.(goto)]

104:	proc  3 (Phil:1) philosophers.pml:20 (state 4)	[forks[(_pid-1)] = _pid]
		forks[0] = 1
		forks[1] = 1
		forks[2] = 3
		forks[3] = 3
		forks[4] = 5

philosopher 2 thinks ...
105:	proc  2 (Phil:1) philosophers.pml:13 (state 1)	[printf('philosopher %d thinks ...\\n',_pid)]

106:	proc  4 (Phil:1) philosophers.pml:18 (state 2)	[nforks = 0]
		Phil(4):nforks = 0

107:	proc  4 (Phil:1) philosophers.pml:29 (state 12)	[.(goto)]

108:	proc  1 (Phil:1) philosophers.pml:24 (state 8)	[nforks = (nforks+1)]
		Phil(1):nforks = 2

109:	proc  3 (Phil:1) philosophers.pml:21 (state 5)	[nforks = (nforks+1)]
		Phil(3):nforks = 2

110:	proc  1 (Phil:1) philosophers.pml:29 (state 12)	[.(goto)]

111:	proc  1 (Phil:1) philosophers.pml:25 (state 9)	[((nforks==2))]

112:	proc  2 (Phil:1) philosophers.pml:18 (state 2)	[nforks = 0]
		Phil(2):nforks = 0

113:	proc  2 (Phil:1) philosophers.pml:29 (state 12)	[.(goto)]

114:	proc  1 (Phil:1) philosophers.pml:25 (state 10)	[goto :b1]

115:	proc  1 (Phil:1) philosophers.pml:29 (state 14)	[assert(((forks[(_pid-1)]==_pid)&&(forks[(_pid%5)]==_pid)))]

116:	proc  3 (Phil:1) philosophers.pml:29 (state 12)	[.(goto)]

philosopher 1 eats ...
117:	proc  1 (Phil:1) philosophers.pml:30 (state 15)	[printf('philosopher %d eats ...\\n',_pid)]

118:	proc  1 (Phil:1) philosophers.pml:34 (state 16)	[forks[(_pid-1)] = 0]
		forks[0] = 0
		forks[1] = 1
		forks[2] = 3
		forks[3] = 3
		forks[4] = 5

119:	proc  3 (Phil:1) philosophers.pml:25 (state 9)	[((nforks==2))]

120:	proc  3 (Phil:1) philosophers.pml:25 (state 10)	[goto :b1]

121:	proc  3 (Phil:1) philosophers.pml:29 (state 14)	[assert(((forks[(_pid-1)]==_pid)&&(forks[(_pid%5)]==_pid)))]

122:	proc  5 (Phil:1) philosophers.pml:22 (state 6)	[((forks[(_pid%5)]==0))]

123:	proc  5 (Phil:1) philosophers.pml:23 (state 7)	[forks[(_pid%5)] = _pid]
		forks[0] = 5
		forks[1] = 1
		forks[2] = 3
		forks[3] = 3
		forks[4] = 5

124:	proc  5 (Phil:1) philosophers.pml:24 (state 8)	[nforks = (nforks+1)]
		Phil(5):nforks = 2

125:	proc  1 (Phil:1) philosophers.pml:35 (state 17)	[forks[(_pid%5)] = 0]
		forks[0] = 5
		forks[1] = 0
		forks[2] = 3
		forks[3] = 3
		forks[4] = 5

126:	proc  5 (Phil:1) philosophers.pml:29 (state 12)	[.(goto)]

127:	proc  1 (Phil:1) philosophers.pml:38 (state 19)	[.(goto)]

128:	proc  5 (Phil:1) philosophers.pml:25 (state 9)	[((nforks==2))]

philosopher 3 eats ...
129:	proc  3 (Phil:1) philosophers.pml:30 (state 15)	[printf('philosopher %d eats ...\\n',_pid)]

130:	proc  5 (Phil:1) philosophers.pml:25 (state 10)	[goto :b1]

philosopher 1 thinks ...
131:	proc  1 (Phil:1) philosophers.pml:13 (state 1)	[printf('philosopher %d thinks ...\\n',_pid)]

132:	proc  2 (Phil:1) philosophers.pml:19 (state 3)	[((forks[(_pid-1)]==0))]

133:	proc  3 (Phil:1) philosophers.pml:34 (state 16)	[forks[(_pid-1)] = 0]
		forks[0] = 5
		forks[1] = 0
		forks[2] = 0
		forks[3] = 3
		forks[4] = 5

134:	proc  2 (Phil:1) philosophers.pml:20 (state 4)	[forks[(_pid-1)] = _pid]
		forks[0] = 5
		forks[1] = 2
		forks[2] = 0
		forks[3] = 3
		forks[4] = 5

135:	proc  2 (Phil:1) philosophers.pml:21 (state 5)	[nforks = (nforks+1)]
		Phil(2):nforks = 1

136:	proc  3 (Phil:1) philosophers.pml:35 (state 17)	[forks[(_pid%5)] = 0]
		forks[0] = 5
		forks[1] = 2
		forks[2] = 0
		forks[3] = 0
		forks[4] = 5

137:	proc  2 (Phil:1) philosophers.pml:29 (state 12)	[.(goto)]

138:	proc  1 (Phil:1) philosophers.pml:18 (state 2)	[nforks = 0]
		Phil(1):nforks = 0

139:	proc  1 (Phil:1) philosophers.pml:29 (state 12)	[.(goto)]

140:	proc  4 (Phil:1) philosophers.pml:19 (state 3)	[((forks[(_pid-1)]==0))]

141:	proc  4 (Phil:1) philosophers.pml:20 (state 4)	[forks[(_pid-1)] = _pid]
		forks[0] = 5
		forks[1] = 2
		forks[2] = 0
		forks[3] = 4
		forks[4] = 5

142:	proc  3 (Phil:1) philosophers.pml:38 (state 19)	[.(goto)]

143:	proc  2 (Phil:1) philosophers.pml:22 (state 6)	[((forks[(_pid%5)]==0))]

144:	proc  2 (Phil:1) philosophers.pml:23 (state 7)	[forks[(_pid%5)] = _pid]
		forks[0] = 5
		forks[1] = 2
		forks[2] = 2
		forks[3] = 4
		forks[4] = 5

145:	proc  2 (Phil:1) philosophers.pml:24 (state 8)	[nforks = (nforks+1)]
		Phil(2):nforks = 2

146:	proc  2 (Phil:1) philosophers.pml:29 (state 12)	[.(goto)]

147:	proc  2 (Phil:1) philosophers.pml:25 (state 9)	[((nforks==2))]

148:	proc  4 (Phil:1) philosophers.pml:21 (state 5)	[nforks = (nforks+1)]
		Phil(4):nforks = 1

philosopher 3 thinks ...
149:	proc  3 (Phil:1) philosophers.pml:13 (state 1)	[printf('philosopher %d thinks ...\\n',_pid)]

150:	proc  5 (Phil:1) philosophers.pml:29 (state 14)	[assert(((forks[(_pid-1)]==_pid)&&(forks[(_pid%5)]==_pid)))]

151:	proc  2 (Phil:1) philosophers.pml:25 (state 10)	[goto :b1]

152:	proc  3 (Phil:1) philosophers.pml:18 (state 2)	[nforks = 0]
		Phil(3):nforks = 0

153:	proc  2 (Phil:1) philosophers.pml:29 (state 14)	[assert(((forks[(_pid-1)]==_pid)&&(forks[(_pid%5)]==_pid)))]

philosopher 5 eats ...
154:	proc  5 (Phil:1) philosophers.pml:30 (state 15)	[printf('philosopher %d eats ...\\n',_pid)]

155:	proc  5 (Phil:1) philosophers.pml:34 (state 16)	[forks[(_pid-1)] = 0]
		forks[0] = 5
		forks[1] = 2
		forks[2] = 2
		forks[3] = 4
		forks[4] = 0

156:	proc  5 (Phil:1) philosophers.pml:35 (state 17)	[forks[(_pid%5)] = 0]
		forks[0] = 0
		forks[1] = 2
		forks[2] = 2
		forks[3] = 4
		forks[4] = 0

157:	proc  3 (Phil:1) philosophers.pml:29 (state 12)	[.(goto)]

philosopher 2 eats ...
158:	proc  2 (Phil:1) philosophers.pml:30 (state 15)	[printf('philosopher %d eats ...\\n',_pid)]

159:	proc  2 (Phil:1) philosophers.pml:34 (state 16)	[forks[(_pid-1)] = 0]
		forks[0] = 0
		forks[1] = 0
		forks[2] = 2
		forks[3] = 4
		forks[4] = 0

160:	proc  4 (Phil:1) philosophers.pml:29 (state 12)	[.(goto)]

161:	proc  1 (Phil:1) philosophers.pml:22 (state 6)	[((forks[(_pid%5)]==0))]

162:	proc  2 (Phil:1) philosophers.pml:35 (state 17)	[forks[(_pid%5)] = 0]
		forks[0] = 0
		forks[1] = 0
		forks[2] = 0
		forks[3] = 4
		forks[4] = 0

163:	proc  1 (Phil:1) philosophers.pml:23 (state 7)	[forks[(_pid%5)] = _pid]
		forks[0] = 0
		forks[1] = 1
		forks[2] = 0
		forks[3] = 4
		forks[4] = 0

164:	proc  3 (Phil:1) philosophers.pml:19 (state 3)	[((forks[(_pid-1)]==0))]

165:	proc  4 (Phil:1) philosophers.pml:22 (state 6)	[((forks[(_pid%5)]==0))]

166:	proc  5 (Phil:1) philosophers.pml:38 (state 19)	[.(goto)]

167:	proc  1 (Phil:1) philosophers.pml:24 (state 8)	[nforks = (nforks+1)]
		Phil(1):nforks = 1

168:	proc  2 (Phil:1) philosophers.pml:38 (state 19)	[.(goto)]

philosopher 5 thinks ...
169:	proc  5 (Phil:1) philosophers.pml:13 (state 1)	[printf('philosopher %d thinks ...\\n',_pid)]

170:	proc  3 (Phil:1) philosophers.pml:20 (state 4)	[forks[(_pid-1)] = _pid]
		forks[0] = 0
		forks[1] = 1
		forks[2] = 3
		forks[3] = 4
		forks[4] = 0

171:	proc  5 (Phil:1) philosophers.pml:18 (state 2)	[nforks = 0]
		Phil(5):nforks = 0

172:	proc  4 (Phil:1) philosophers.pml:23 (state 7)	[forks[(_pid%5)] = _pid]
		forks[0] = 0
		forks[1] = 1
		forks[2] = 3
		forks[3] = 4
		forks[4] = 4

173:	proc  1 (Phil:1) philosophers.pml:29 (state 12)	[.(goto)]

174:	proc  4 (Phil:1) philosophers.pml:24 (state 8)	[nforks = (nforks+1)]
		Phil(4):nforks = 2

philosopher 2 thinks ...
175:	proc  2 (Phil:1) philosophers.pml:13 (state 1)	[printf('philosopher %d thinks ...\\n',_pid)]

176:	proc  1 (Phil:1) philosophers.pml:19 (state 3)	[((forks[(_pid-1)]==0))]

177:	proc  1 (Phil:1) philosophers.pml:20 (state 4)	[forks[(_pid-1)] = _pid]
		forks[0] = 1
		forks[1] = 1
		forks[2] = 3
		forks[3] = 4
		forks[4] = 4

178:	proc  2 (Phil:1) philosophers.pml:18 (state 2)	[nforks = 0]
		Phil(2):nforks = 0

179:	proc  5 (Phil:1) philosophers.pml:29 (state 12)	[.(goto)]

180:	proc  4 (Phil:1) philosophers.pml:29 (state 12)	[.(goto)]

181:	proc  1 (Phil:1) philosophers.pml:21 (state 5)	[nforks = (nforks+1)]
		Phil(1):nforks = 2

182:	proc  3 (Phil:1) philosophers.pml:21 (state 5)	[nforks = (nforks+1)]
		Phil(3):nforks = 1

183:	proc  3 (Phil:1) philosophers.pml:29 (state 12)	[.(goto)]

184:	proc  1 (Phil:1) philosophers.pml:29 (state 12)	[.(goto)]

185:	proc  1 (Phil:1) philosophers.pml:25 (state 9)	[((nforks==2))]

186:	proc  2 (Phil:1) philosophers.pml:29 (state 12)	[.(goto)]

187:	proc  1 (Phil:1) philosophers.pml:25 (state 10)	[goto :b1]

188:	proc  1 (Phil:1) philosophers.pml:29 (state 14)	[assert(((forks[(_pid-1)]==_pid)&&(forks[(_pid%5)]==_pid)))]

philosopher 1 eats ...
189:	proc  1 (Phil:1) philosophers.pml:30 (state 15)	[printf('philosopher %d eats ...\\n',_pid)]

190:	proc  1 (Phil:1) philosophers.pml:34 (state 16)	[forks[(_pid-1)] = 0]
		forks[0] = 0
		forks[1] = 1
		forks[2] = 3
		forks[3] = 4
		forks[4] = 4

191:	proc  5 (Phil:1) philosophers.pml:22 (state 6)	[((forks[(_pid%5)]==0))]

192:	proc  4 (Phil:1) philosophers.pml:25 (state 9)	[((nforks==2))]

193:	proc  4 (Phil:1) philosophers.pml:25 (state 10)	[goto :b1]

194:	proc  5 (Phil:1) philosophers.pml:23 (state 7)	[forks[(_pid%5)] = _pid]
		forks[0] = 5
		forks[1] = 1
		forks[2] = 3
		forks[3] = 4
		forks[4] = 4

195:	proc  1 (Phil:1) philosophers.pml:35 (state 17)	[forks[(_pid%5)] = 0]
		forks[0] = 5
		forks[1] = 0
		forks[2] = 3
		forks[3] = 4
		forks[4] = 4

196:	proc  4 (Phil:1) philosophers.pml:29 (state 14)	[assert(((forks[(_pid-1)]==_pid)&&(forks[(_pid%5)]==_pid)))]

197:	proc  2 (Phil:1) philosophers.pml:19 (state 3)	[((forks[(_pid-1)]==0))]

198:	proc  1 (Phil:1) philosophers.pml:38 (state 19)	[.(goto)]

199:	proc  2 (Phil:1) philosophers.pml:20 (state 4)	[forks[(_pid-1)] = _pid]
		forks[0] = 5
		forks[1] = 2
		forks[2] = 3
		forks[3] = 4
		forks[4] = 4

200:	proc  2 (Phil:1) philosophers.pml:21 (state 5)	[nforks = (nforks+1)]
		Phil(2):nforks = 1

201:	proc  5 (Phil:1) philosophers.pml:24 (state 8)	[nforks = (nforks+1)]
		Phil(5):nforks = 1

philosopher 4 eats ...
202:	proc  4 (Phil:1) philosophers.pml:30 (state 15)	[printf('philosopher %d eats ...\\n',_pid)]

203:	proc  2 (Phil:1) philosophers.pml:29 (state 12)	[.(goto)]

204:	proc  5 (Phil:1) philosophers.pml:29 (state 12)	[.(goto)]

philosopher 1 thinks ...
205:	proc  1 (Phil:1) philosophers.pml:13 (state 1)	[printf('philosopher %d thinks ...\\n',_pid)]

206:	proc  1 (Phil:1) philosophers.pml:18 (state 2)	[nforks = 0]
		Phil(1):nforks = 0

207:	proc  4 (Phil:1) philosophers.pml:34 (state 16)	[forks[(_pid-1)] = 0]
		forks[0] = 5
		forks[1] = 2
		forks[2] = 3
		forks[3] = 0
		forks[4] = 4

208:	proc  3 (Phil:1) philosophers.pml:22 (state 6)	[((forks[(_pid%5)]==0))]

209:	proc  4 (Phil:1) philosophers.pml:35 (state 17)	[forks[(_pid%5)] = 0]
		forks[0] = 5
		forks[1] = 2
		forks[2] = 3
		forks[3] = 0
		forks[4] = 0

210:	proc  5 (Phil:1) philosophers.pml:19 (state 3)	[((forks[(_pid-1)]==0))]

211:	proc  5 (Phil:1) philosophers.pml:20 (state 4)	[forks[(_pid-1)] = _pid]
		forks[0] = 5
		forks[1] = 2
		forks[2] = 3
		forks[3] = 0
		forks[4] = 5

212:	proc  5 (Phil:1) philosophers.pml:21 (state 5)	[nforks = (nforks+1)]
		Phil(5):nforks = 2

213:	proc  5 (Phil:1) philosophers.pml:29 (state 12)	[.(goto)]

214:	proc  4 (Phil:1) philosophers.pml:38 (state 19)	[.(goto)]

215:	proc  1 (Phil:1) philosophers.pml:29 (state 12)	[.(goto)]

philosopher 4 thinks ...
216:	proc  4 (Phil:1) philosophers.pml:13 (state 1)	[printf('philosopher %d thinks ...\\n',_pid)]

217:	proc  3 (Phil:1) philosophers.pml:23 (state 7)	[forks[(_pid%5)] = _pid]
		forks[0] = 5
		forks[1] = 2
		forks[2] = 3
		forks[3] = 3
		forks[4] = 5

218:	proc  5 (Phil:1) philosophers.pml:25 (state 9)	[((nforks==2))]

219:	proc  3 (Phil:1) philosophers.pml:24 (state 8)	[nforks = (nforks+1)]
		Phil(3):nforks = 2

220:	proc  5 (Phil:1) philosophers.pml:25 (state 10)	[goto :b1]

221:	proc  4 (Phil:1) philosophers.pml:18 (state 2)	[nforks = 0]
		Phil(4):nforks = 0

222:	proc  4 (Phil:1) philosophers.pml:29 (state 12)	[.(goto)]

223:	proc  3 (Phil:1) philosophers.pml:29 (state 12)	[.(goto)]

224:	proc  5 (Phil:1) philosophers.pml:29 (state 14)	[assert(((forks[(_pid-1)]==_pid)&&(forks[(_pid%5)]==_pid)))]

225:	proc  3 (Phil:1) philosophers.pml:25 (state 9)	[((nforks==2))]

226:	proc  3 (Phil:1) philosophers.pml:25 (state 10)	[goto :b1]

227:	proc  3 (Phil:1) philosophers.pml:29 (state 14)	[assert(((forks[(_pid-1)]==_pid)&&(forks[(_pid%5)]==_pid)))]

philosopher 3 eats ...
228:	proc  3 (Phil:1) philosophers.pml:30 (state 15)	[printf('philosopher %d eats ...\\n',_pid)]

229:	proc  3 (Phil:1) philosophers.pml:34 (state 16)	[forks[(_pid-1)] = 0]
		forks[0] = 5
		forks[1] = 2
		forks[2] = 0
		forks[3] = 3
		forks[4] = 5

230:	proc  2 (Phil:1) philosophers.pml:22 (state 6)	[((forks[(_pid%5)]==0))]

231:	proc  3 (Phil:1) philosophers.pml:35 (state 17)	[forks[(_pid%5)] = 0]
		forks[0] = 5
		forks[1] = 2
		forks[2] = 0
		forks[3] = 0
		forks[4] = 5

232:	proc  2 (Phil:1) philosophers.pml:23 (state 7)	[forks[(_pid%5)] = _pid]
		forks[0] = 5
		forks[1] = 2
		forks[2] = 2
		forks[3] = 0
		forks[4] = 5

233:	proc  4 (Phil:1) philosophers.pml:19 (state 3)	[((forks[(_pid-1)]==0))]

234:	proc  2 (Phil:1) philosophers.pml:24 (state 8)	[nforks = (nforks+1)]
		Phil(2):nforks = 2

235:	proc  4 (Phil:1) philosophers.pml:20 (state 4)	[forks[(_pid-1)] = _pid]
		forks[0] = 5
		forks[1] = 2
		forks[2] = 2
		forks[3] = 4
		forks[4] = 5

236:	proc  2 (Phil:1) philosophers.pml:29 (state 12)	[.(goto)]

philosopher 5 eats ...
237:	proc  5 (Phil:1) philosophers.pml:30 (state 15)	[printf('philosopher %d eats ...\\n',_pid)]

238:	proc  3 (Phil:1) philosophers.pml:38 (state 19)	[.(goto)]

philosopher 3 thinks ...
239:	proc  3 (Phil:1) philosophers.pml:13 (state 1)	[printf('philosopher %d thinks ...\\n',_pid)]

240:	proc  3 (Phil:1) philosophers.pml:18 (state 2)	[nforks = 0]
		Phil(3):nforks = 0

241:	proc  5 (Phil:1) philosophers.pml:34 (state 16)	[forks[(_pid-1)] = 0]
		forks[0] = 5
		forks[1] = 2
		forks[2] = 2
		forks[3] = 4
		forks[4] = 0

242:	proc  5 (Phil:1) philosophers.pml:35 (state 17)	[forks[(_pid%5)] = 0]
		forks[0] = 0
		forks[1] = 2
		forks[2] = 2
		forks[3] = 4
		forks[4] = 0

243:	proc  4 (Phil:1) philosophers.pml:21 (state 5)	[nforks = (nforks+1)]
		Phil(4):nforks = 1

244:	proc  3 (Phil:1) philosophers.pml:29 (state 12)	[.(goto)]

245:	proc  5 (Phil:1) philosophers.pml:38 (state 19)	[.(goto)]

246:	proc  4 (Phil:1) philosophers.pml:29 (state 12)	[.(goto)]

247:	proc  4 (Phil:1) philosophers.pml:22 (state 6)	[((forks[(_pid%5)]==0))]

248:	proc  1 (Phil:1) philosophers.pml:19 (state 3)	[((forks[(_pid-1)]==0))]

249:	proc  2 (Phil:1) philosophers.pml:25 (state 9)	[((nforks==2))]

philosopher 5 thinks ...
250:	proc  5 (Phil:1) philosophers.pml:13 (state 1)	[printf('philosopher %d thinks ...\\n',_pid)]

-------------
depth-limit (-u250 steps) reached
#processes: 6
		forks[0] = 0
		forks[1] = 2
		forks[2] = 2
		forks[3] = 4
		forks[4] = 0
250:	proc  5 (Phil:1) philosophers.pml:18 (state 2)
		Phil(5):nforks = 2
250:	proc  4 (Phil:1) philosophers.pml:23 (state 7)
		Phil(4):nforks = 1
250:	proc  3 (Phil:1) philosophers.pml:18 (state 11)
		Phil(3):nforks = 0
250:	proc  2 (Phil:1) philosophers.pml:25 (state 10)
		Phil(2):nforks = 2
250:	proc  1 (Phil:1) philosophers.pml:20 (state 4)
		Phil(1):nforks = 0
250:	proc  0 (:init::1) philosophers.pml:45 (state 10)
		:init:(0):i = 5
6 processes created
null
